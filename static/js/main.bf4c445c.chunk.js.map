{"version":3,"sources":["Supersonico.js","Login.js","Sidebar.js","Body.js","Footer.js","Player.js","DataLayer.js","App.js","reducer.js","serviceWorker.js","index.js"],"names":["loginUrl","join","Login","className","src","alt","href","Sidebar","Body","Footer","Player","spotify","DataLayerContext","createContext","DataLayer","initialState","reducer","children","Provider","value","useReducer","SpotifyWebApi","App","useContext","token","user","dispatch","useEffect","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","_token","access_token","type","setAccessToken","getMe","then","console","log","state","action","Boolean","hostname","match","ReactDOM","render","StrictMode","playlists","playing","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iWA2BaA,G,YAAQ,UA1BrB,yCA0BqB,sBAtBJ,mCAsBI,yBAxBD,6CAwBC,kBApBN,CACX,8BACA,4BACA,2BACA,gBACA,8BAesGC,KAAK,OAA1F,0CCXNC,MAZf,WACI,OACI,yBAAKC,UAAU,SACX,yBACIC,IAAI,gBACJC,IAAI,KAER,uBAAGC,KAAMN,GAAT,+B,kCCQGO,MAdf,WACI,OACI,yBAAKJ,UAAU,WACX,yBACIA,UAAU,gBACVC,IAAI,gBACJC,IAAI,O,MCELG,MAVf,WACI,OACI,yBAAKL,UAAU,QACX,+C,MCMGM,MATf,WACI,OACI,yBAAKN,UAAU,UACX,iDCcGO,MAbf,YACI,OADyB,EAAXC,QAEV,yBAAKR,UAAU,UACX,yBAAKA,UAAU,gBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGJ,kBAAC,EAAD,QCbCS,EAAmBC,0BAEnBC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,SAA1B,OACjB,kBAACL,EAAiBM,SAAlB,CAA2BC,MAAQC,qBAAWJ,EAASD,IAClDE,ICEPN,EAAU,IAAIU,IAqCLC,MAnCf,WAAgB,IAAD,EDA4BC,qBAAWX,GCAvC,0BAECY,GAFD,EAELC,KAFK,EAECD,OAASE,EAFV,KA4Bb,OAxBAC,qBAAU,WACR,IAAMC,EPCCC,OAAOC,SAASF,KAClBG,UAAU,GACVC,MAAM,KACNC,QAAO,SAACC,EAASC,GACd,IAAIC,EAAQD,EAAKH,MAAM,KAGvB,OAFAE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IAEtCF,IACR,IORPL,OAAOC,SAASF,KAAO,GACvB,IAAMU,EAASV,EAAKW,aAEhBD,IAEFZ,EAAS,CACPc,KAAM,YACNhB,MAAOc,IAGT3B,EAAQ8B,eAAeH,GACvB3B,EAAQ+B,QAAQC,MAAK,SAAClB,GACpBC,EAAS,CACPc,KAAM,WACNf,KAAMA,QAKZmB,QAAQC,IAAI,qBAAsBrB,KACjC,IAID,yBAAKrB,UAAU,OAAOqB,EACpB,kBAAC,EAAD,CAAQb,QAASA,IAAe,kBAAC,EAAD,Q,OCbvBK,EApBC,SAAC8B,EAAOC,GAIpB,OAFAH,QAAQC,IAAIE,GAELA,EAAOP,MACV,IAAK,WACD,OAAO,2BACAM,GADP,IAEIrB,KAAMsB,EAAOtB,OAErB,IAAK,YACD,OAAO,2BACAqB,GADP,IAEItB,MAAOuB,EAAOvB,QAEtB,QACI,OAAOsB,ICZCE,QACW,cAA7BnB,OAAOC,SAASmB,UAEe,UAA7BpB,OAAOC,SAASmB,UAEhBpB,OAAOC,SAASmB,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAWtC,aFXa,CACxBU,KAAM,KACN6B,UAAW,GACXC,SAAS,EACTpB,KAAM,KACNX,MAAO,MEMgCR,QAAUA,GAC/C,kBAAC,EAAD,QAGJwC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.bf4c445c.chunk.js","sourcesContent":["export const authEndpoint =\n\"https://accounts.spotify.com/authorize\";\n\nconst redirectUri = \"https://kevindavis98.github.io/git-prueba/\";\n\nconst clientId = \"bf8ae977c9a949ddb9d6141d4886426c\";\n\nconst scopes = [\n    \"user-read-currently-playing\",\n    \"user-read-recently-played\",\n    \"user-read-playback-state\",\n    \"user-top-read\",\n    \"user-modify-playback-state\"\n];\n\nexport const getTokenFromUrl = () => {\n    return window.location.hash\n        .substring(1)\n        .split('&')\n        .reduce((initial, item) => {\n            let parts = item.split('=');\n            initial[parts[0]] = decodeURIComponent(parts[1]);\n\n            return initial;\n        }, {});\n};\n\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`;\n","import React from 'react';\nimport './Login.css';\nimport { loginUrl } from './Supersonico';\n\nfunction Login() {\n    return(\n        <div className=\"login\">\n            <img \n                src=\"SuperLogo.jpg\"\n                alt=\"\"\n            />\n            <a href={loginUrl}>LOGIN WITH SUPERSÓNICO</a>\n        </div>\n    )\n}\n\nexport default Login;","import React from 'react'\nimport \"./Sidebar.css\";\nimport SidebarOption from './SidebarOption';\n\n\nfunction Sidebar(){\n    return(\n        <div className=\"sidebar\">\n            <img \n                className=\"sidebar__logo\" \n                src=\"SuperLogo.jpg\"\n                alt=\"\"\n            />\n            \n\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport \"./Body.css\";\n\nfunction Body(){\n    return (\n        <div className=\"body\">\n            <h1>\n                I am the body\n            </h1>\n        </div>\n    )\n}\n\nexport default Body","import React from 'react'\nimport \"./Footer.css\";\n\nfunction Footer(){\n    return (\n        <div className=\"footer\">\n            <h1>I am the footer</h1>\n\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react'\nimport \"./Player.css\";\nimport Sidebar from './Sidebar';\nimport Body from './Body';\nimport Footer from \"./Footer\";\n\n\nfunction Player({ spotify }) {\n    return(\n        <div className=\"player\">\n            <div className=\"player__body\">\n                <Sidebar />\n                <Body /> \n            </div>\n            \n            <Footer />\n        </div>\n    )\n}\n\nexport default Player","import React, { createContext, useContext, useReducer, Children } from \"react\";\n\nexport const DataLayerContext = createContext();\n\nexport const DataLayer = ({ initialState, reducer, children }) => (\n        <DataLayerContext.Provider value ={useReducer(reducer, initialState)}>\n            {children}\n        </DataLayerContext.Provider>\n    );\n\n    export const useDataLayerValue = () => useContext(DataLayerContext);","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Login from './Login';\nimport { getTokenFromUrl } from './Supersonico';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport Player from './Player';\nimport { useDataLayerValue } from \"./DataLayer\";\n\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n\n  const[{ user, token }, dispatch] = useDataLayerValue();\n  \n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n\n    if (_token){\n\n      dispatch({\n        type: \"SET_TOKEN\",\n        token: _token,\n      });\n\n      spotify.setAccessToken(_token);\n      spotify.getMe().then((user) => { \n        dispatch({\n          type: 'SET_USER',\n          user: user,\n        });\n      });\n    }\n    \n    console.log(\"I HAVE A TOKEN >>>\", token);\n  }, []);\n  \n  return (\n    // BEM\n    <div className=\"app\">{token ? \n      <Player spotify={spotify} /> : (<Login />)}</div>\n  );\n}\n\nexport default App;\n","export const initialState = {\n    user: null,\n    playlists: [],\n    playing: false,\n    item: null,\n    token: null,\n};\n\nconst reducer = (state, action) =>{\n    \n    console.log(action);\n\n    switch(action.type) {\n        case \"SET_USER\":\n            return {\n                ...state,\n                user: action.user\n            };\n        case \"SET_TOKEN\":\n            return {\n                ...state,\n                token: action.token\n            }\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { DataLayer } from \"./DataLayer\";\nimport reducer, { initialState } from './reducer';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataLayer initialState={initialState} reducer ={reducer}>\n      <App />\n    </DataLayer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}